import pandas as pd
import numpy as np
import plotly.graph_objects as go

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score


def load_data():
    try:
        df = pd.read_csv(r"C:\Users\Administrator\Downloads\Advertising.csv")
        df.drop(columns=["Unnamed: 0"], errors='ignore', inplace=True)
        print(" Data loaded successfully.")
        return df
    except FileNotFoundError:
        print("File 'Advertising.csv' not found. Please ensure it's in the same folder.")
        exit()


def train_model(df):
    X = df[["TV", "Radio", "Newspaper"]]
    y = df["Sales"]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print(f"\n Mean Squared Error (MSE): {mse:.2f}")
    print(f"RÂ² Score: {r2:.2f}")

    return model, X_test, y_test, y_pred


def show_coefficients(model, features):
    coeff_df = pd.DataFrame({
        "Feature": features,
        "Coefficient": model.coef_
    })

    print("\n Feature Impact on Sales:")
    print(coeff_df)

    print("\n Insights:")
    print("- Radio ads have the strongest positive impact on sales.")
    print("- TV ads also contribute significantly.")
    print("- Newspaper has minimal or even negative impact in some models.")
    print("- The model explains around 90% of the variation in sales.")


def get_user_input_and_predict(model):
    try:
        print("\nEnter your advertising budgets to predict sales:")

        tv = float(input("TV Budget: "))
        radio = float(input("Radio Budget: "))
        news = float(input("Newspaper Budget: "))

        user_df = pd.DataFrame([[tv, radio, news]], columns=["TV", "Radio", "Newspaper"])
        prediction = model.predict(user_df)[0]

        print(f"\nPredicted Sales: {prediction:.2f} units")
        return tv, radio, news, prediction

    except Exception as e:
        print("Invalid input. Please enter numeric values.")
        exit()


def plot_interactive_graphs(df, X_test, y_pred, user_inputs):
    user_tv, user_radio, user_news, user_sales = user_inputs

    fig_tv = go.Figure()
    fig_tv.add_trace(go.Scatter(x=df["TV"], y=df["Sales"], mode='markers', name='TV Data', marker=dict(color='red')))
    fig_tv.add_trace(go.Scatter(x=X_test["TV"], y=y_pred, mode='markers', name='TV Predictions', marker=dict(color='cyan')))
    fig_tv.add_trace(go.Scatter(x=[user_tv], y=[user_sales], mode='markers+text', name='Your TV Prediction',
                                marker=dict(color='yellow', size=14, symbol='star'),
                                text=[f'{user_sales:.2f}'], textposition='top center'))
    fig_tv.update_layout(title="TV Spend vs Sales", xaxis_title="TV Budget", yaxis_title="Sales", template="plotly_dark")

    fig_radio = go.Figure()
    fig_radio.add_trace(go.Scatter(x=df["Radio"], y=df["Sales"], mode='markers', name='Radio Data', marker=dict(color='green')))
    fig_radio.add_trace(go.Scatter(x=X_test["Radio"], y=y_pred, mode='markers', name='Radio Predictions', marker=dict(color='cyan')))
    fig_radio.add_trace(go.Scatter(x=[user_radio], y=[user_sales], mode='markers+text', name='Your Radio Prediction',
                                   marker=dict(color='yellow', size=14, symbol='star'),
                                   text=[f'{user_sales:.2f}'], textposition='top center'))
    fig_radio.update_layout(title="Radio Spend vs Sales", xaxis_title="Radio Budget", yaxis_title="Sales", template="plotly_dark")

    fig_news = go.Figure()
    fig_news.add_trace(go.Scatter(x=df["Newspaper"], y=df["Sales"], mode='markers', name='Newspaper Data', marker=dict(color='blue')))
    fig_news.add_trace(go.Scatter(x=X_test["Newspaper"], y=y_pred, mode='markers', name='Newspaper Predictions', marker=dict(color='cyan')))
    fig_news.add_trace(go.Scatter(x=[user_news], y=[user_sales], mode='markers+text', name='Your Newspaper Prediction',
                                  marker=dict(color='yellow', size=14, symbol='star'),
                                  text=[f'{user_sales:.2f}'], textposition='top center'))
    fig_news.update_layout(title="Newspaper Spend vs Sales", xaxis_title="Newspaper Budget", yaxis_title="Sales", template="plotly_dark")

    fig_tv.show()
    fig_radio.show()
    fig_news.show()


if __name__ == "__main__":
    df = load_data()
    model, X_test, y_test, y_pred = train_model(df)
    show_coefficients(model, ["TV", "Radio", "Newspaper"])
    user_inputs = get_user_input_and_predict(model)
    plot_interactive_graphs(df, X_test, y_pred, user_inputs)
