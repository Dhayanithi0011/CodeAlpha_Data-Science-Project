import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.decomposition import PCA


df = pd.read_csv(r'C:\Users\Administrator\Downloads\Iris.csv')
df.columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']
df['species'] = df['species'].astype('category').cat.codes

X = df.drop('species', axis=1)
y = df['species']
species_names = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']


X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('logreg', LogisticRegression(max_iter=200))
])

pipeline.fit(X_train, y_train)

y_pred = pipeline.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

cv_scores = cross_val_score(pipeline, X, y, cv=5)
print("\nCross-validation Accuracy Scores:", cv_scores)
print("Mean CV Accuracy:", np.mean(cv_scores))

new_sample = np.array([[5.1, 3.5, 1.4, 0.2]])
predicted_class = pipeline.predict(new_sample)[0]
print("\nPredicted species for new sample:", species_names[predicted_class])

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)
sample_pca = pca.transform(new_sample)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=[species_names[i] for i in y], palette='Set1')
plt.scatter(sample_pca[0, 0], sample_pca[0, 1], color='black', s=200, marker='X', label='New Sample')

plt.title("Iris Dataset PCA Projection")
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
